/*??????? ?????????? ??????? ? ?????? ?????????, ????????????? ?? ????????.*/
SELECT 	c.category_id,
        c."name" AS category_name,
		count(f.film_id) AS films_number
FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id 
INNER JOIN category c 
ON fc.category_id = c.category_id
GROUP BY c.category_id, c."name"
ORDER BY films_number DESC;

/* ??????? 10 ???????, ??? ?????? ???????? ????? ??????????, ????????????? ?? ????????.*/
SELECT actor_id,
       actor_name,
       number_of_rentals,
       ranking
FROM
	(SELECT actor_id,
       	actor_name,
       	number_of_rentals,
       	DENSE_RANK() OVER (ORDER BY number_of_rentals DESC) AS ranking
	FROM 
		(SELECT a.actor_id AS actor_id,
       		a.first_name||' '||a.last_name AS actor_name,
       		COUNT(fa.film_id) AS number_of_rentals
		FROM rental r 
		INNER JOIN inventory i 
		ON r.inventory_id = i.inventory_id 
		INNER JOIN film f 
		ON i.film_id = f.film_id 
		INNER JOIN film_actor fa 
		ON fa.film_id = f.film_id 
		INNER JOIN actor a 
		ON fa.actor_id = a.actor_id 
		GROUP BY a.actor_id, actor_name
		ORDER BY number_of_rentals DESC) AS subquery) AS subquery2
WHERE ranking<=10;

/*??????? ????????? ???????, ?? ??????? ????????? ?????? ????? ?????.*/
SELECT c.category_id,
       c.name AS category_name,
       SUM(p.amount) AS margin
FROM payment p
INNER JOIN rental r
ON p.rental_id = r.rental_id 
INNER JOIN inventory i 
ON r.inventory_id = i.inventory_id 
INNER JOIN film f 
ON i.film_id = f.film_id 
INNER JOIN film_category fc 
ON fc.film_id = f.film_id 
INNER JOIN category c 
ON c.category_id = fc.category_id 
GROUP BY c.category_id, category_name
ORDER BY margin DESC
LIMIT 1;

/*??????? ???????? ???????, ??????? ??? ? inventory. ???????? ?????? ??? ????????????? ????????? IN.*/
SELECT f.film_id,
       f.title       
FROM film f
LEFT JOIN inventory i 
ON f.film_id = i.film_id 
WHERE i.inventory_id IS NULL;

/*??????? ??? 3 ???????, ??????? ?????? ????? ?????????? ? ??????? ? ????????? “Children”. 
 * ???? ? ?????????? ??????? ?????????? ???-?? ???????, ??????? ????.*/
SELECT a.actor_id,
       a.first_name ||' '|| a.last_name AS actor_name,
       COUNT(a.actor_id) AS number_if_child_film
FROM film_actor fa 
INNER JOIN film f
ON f.film_id = fa.film_id 
INNER JOIN actor a 
ON a.actor_id = fa.actor_id 
INNER JOIN film_category fc 
ON f.film_id = fc.film_id 
INNER JOIN category c 
ON c.category_id = fc.category_id
WHERE c."name" = 'Children'
GROUP BY a.actor_id, actor_name
HAVING COUNT(a.actor_id) >= 3
ORDER BY number_if_child_film DESC

/*??????? ?????? ? ??????????? ???????? ? ?????????? ???????? (???????? — customer.active = 1). 
 * ????????????? ?? ?????????? ?????????? ???????? ?? ????????. */
SELECT c2.city,
SUM(CASE WHEN c.active = 1 THEN 1 ELSE 0 END) AS active,
SUM(CASE WHEN c.active = 0 THEN 1 ELSE 0 END) AS not_active
FROM customer c
INNER JOIN address a
ON a.address_id = c.address_id
INNER JOIN city c2
ON c2.city_id = a.city_id
GROUP BY c2.city
ORDER BY SUM(CASE WHEN c.active = 0 THEN 1 ELSE 0 END) DESC;

/*??????? ????????? ???????, ? ??????? ????? ??????? ???-?? ????? ????????? ?????? ? ??????? 
 * (customer.address_id ? ???? city), ? ??????? ?????????? ?? ????? “a”. 
 * ?? ?? ????? ??????? ??? ??????? ? ??????? ???? ?????? “-”. ???????? ??? ? ????? ???????.*/
SELECT * 
FROM 
(SELECT category_id,
	   category_name,
	   rent_city_a,
	   DENSE_RANK() OVER (ORDER BY rent_city_a DESC) AS rank_a,
	   rent_city_,
	   DENSE_RANK() OVER (ORDER BY rent_city_ DESC) AS rank_
FROM (SELECT c3.category_id AS category_id,
       	c3.name AS category_name,
	   	SUM(CASE WHEN c2.city LIKE 'a%' THEN EXTRACT(DAY FROM r.return_date - r.rental_date) ELSE 0 END) as rent_city_a,
	   	SUM(CASE WHEN c2.city LIKE '%-%' THEN EXTRACT(DAY FROM r.return_date - r.rental_date)  ELSE 0 END) as rent_city_
	FROM rental r
	INNER JOIN customer c 
	ON r.customer_id = c.customer_id 
	INNER JOIN address a 
	ON c.address_id = a.address_id 
	INNER JOIN city c2
	ON c2.city_id = a.city_id 
	INNER JOIN inventory i 
	ON r.inventory_id = i.inventory_id 
	INNER JOIN film f 
	ON i.film_id = f.film_id 
	INNER JOIN film_category fc 
	ON fc.film_id = fc.film_id 
	INNER JOIN category c3 
	ON c3.category_id = fc.category_id
	GROUP BY c3.category_id, c3.name) AS subquery) AS subquery2
WHERE rank_a = 1 OR rank_ = 1;





       

		